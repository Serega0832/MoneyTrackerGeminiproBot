# handlers/transactions.py
import logging
from aiogram import Router, types, F, Bot # –î–æ–±–∞–≤–∏–ª Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
# --- –î–û–ë–ê–í–ò–¢–¨ –ò–ú–ü–û–†–¢ ---
from aiogram.utils.markdown import hbold
import keyboards as kb
import db
from states import TransactionStates

transactions_router = Router()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –î–æ–±–∞–≤–ª–µ–Ω–∏—è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ---
# ... (process_add_expense, process_add_income, process_amount - –±–µ–∑ hbold) ...
@transactions_router.message(F.text == "üìä –ó–∞–ø–∏—Å–∞—Ç—å –†–∞—Å—Ö–æ–¥", StateFilter(None))
async def process_add_expense(message: types.Message, state: FSMContext):
    await state.set_state(TransactionStates.waiting_for_amount); await state.update_data(transaction_type='expense')
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=kb.cancel_kb)
@transactions_router.message(F.text == "üí∞ –ó–∞–ø–∏—Å–∞—Ç—å –î–æ—Ö–æ–¥", StateFilter(None))
async def process_add_income(message: types.Message, state: FSMContext):
    await state.set_state(TransactionStates.waiting_for_amount); await state.update_data(transaction_type='income')
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:", reply_markup=kb.cancel_kb)
@transactions_router.message(StateFilter(TransactionStates.waiting_for_amount))
async def process_amount(message: types.Message, state: FSMContext):
    try: amount_str = message.text.replace(',', '.'); amount = float(amount_str); assert amount > 0
    except (ValueError, AssertionError): await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (> 0)."); return
    await state.update_data(amount=amount); user_data = await state.get_data(); transaction_type = user_data.get('transaction_type')
    await state.set_state(TransactionStates.waiting_for_category); user_id = message.from_user.id
    try: reply_markup = await kb.get_category_choice_kb(user_id, transaction_type)
    except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –∫–ª–∞–≤—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π {user_id}, {transaction_type}: {e}"); await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞–≤—ã.", reply_markup=kb.cancel_kb); return
    prompt_text = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞:" if transaction_type == 'expense' else "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞:"
    if not reply_markup or not reply_markup.inline_keyboard: logging.warning(f"–ö–ª–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç–∞ {user_id}, {transaction_type}."); await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ –≤ '–ú–æ–∏ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'.", reply_markup=kb.main_kb); await state.clear(); return
    await message.answer(prompt_text, reply_markup=reply_markup)


@transactions_router.callback_query(StateFilter(TransactionStates.waiting_for_category), F.data.startswith('exp_cat:') | F.data.startswith('inc_cat:'))
async def process_category_callback(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot): # –î–æ–±–∞–≤–∏–ª bot
    current_state = await state.get_state()
    if current_state != TransactionStates.waiting_for_category.state: await callback_query.answer("–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True); return
    code = callback_query.data
    try: prefix, category = code.split(':', 1)
    except ValueError: logging.warning(f"–ù–µ–∫–æ—Ä—Ä. cb '{code}' –æ—Ç {callback_query.from_user.id}"); await callback_query.answer("–û—à–∏–±–∫–∞.", show_alert=True); return
    user_data = await state.get_data(); amount = user_data.get('amount'); transaction_type = user_data.get('transaction_type')
    if (prefix == 'exp_cat' and transaction_type != 'expense') or (prefix == 'inc_cat' and transaction_type != 'income'): await callback_query.answer("–û—à–∏–±–∫–∞ —Ç–∏–ø–∞.", show_alert=True); return
    try: await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=None)
    except Exception as e: logging.error(f"–ù–µ —É–¥. —É–±—Ä–∞—Ç—å –∫–ª–∞–≤—É: {e}")
    success = await db.add_transaction(user_id=callback_query.from_user.id, transaction_type=transaction_type, amount=amount, category=category)
    if success:
        type_text = "–†–∞—Å—Ö–æ–¥" if transaction_type == 'expense' else "–î–æ—Ö–æ–¥"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hbold
        await callback_query.message.answer(f"{type_text} –Ω–∞ —Å—É–º–º—É {hbold(f'{amount:.2f}')} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {hbold(category)} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!", reply_markup=kb.main_kb)
    else:
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.", reply_markup=kb.main_kb)
    await callback_query.answer(); await state.clear()

@transactions_router.message(StateFilter(TransactionStates.waiting_for_category))
async def incorrect_category_input(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ.")