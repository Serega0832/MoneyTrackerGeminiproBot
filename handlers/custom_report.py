# handlers/custom_report.py
import logging
from datetime import datetime, timezone, timedelta # –î–æ–±–∞–≤–∏–ª timedelta
from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
# --- –î–û–ë–ê–í–ò–¢–¨ –ò–ú–ü–û–†–¢ ---
from aiogram.utils.markdown import hbold
import keyboards as kb
import db
from states import CustomReportStates
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ reports.py (–∏–ª–∏ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π utils.py)
from .reports import format_report_text

custom_report_router = Router()

DATE_FORMAT = "%d.%m.%Y"

@custom_report_router.message(Command("customreport"), StateFilter(None))
# @custom_report_router.message(F.text == "üìä –û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥", StateFilter(None)) # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É
async def cmd_custom_report(message: types.Message, state: FSMContext):
    await state.set_state(CustomReportStates.waiting_for_start_date)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hbold
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {hbold(DATE_FORMAT)} (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2024):",
        reply_markup=kb.cancel_kb
    )

@custom_report_router.message(StateFilter(CustomReportStates.waiting_for_start_date))
async def process_start_date(message: types.Message, state: FSMContext):
    try:
        start_date_naive = datetime.strptime(message.text, DATE_FORMAT)
        start_date = start_date_naive.replace(tzinfo=timezone.utc)
        await state.update_data(start_date=start_date)
        await state.set_state(CustomReportStates.waiting_for_end_date)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hbold
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {hbold(DATE_FORMAT)}:",
            reply_markup=kb.cancel_kb
        )
    except ValueError:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hbold
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ {hbold(DATE_FORMAT)} –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'."
        )

@custom_report_router.message(StateFilter(CustomReportStates.waiting_for_end_date))
async def process_end_date(message: types.Message, state: FSMContext):
    try:
        end_date_naive = datetime.strptime(message.text, DATE_FORMAT)
        end_date = (end_date_naive + timedelta(days=1)).replace(tzinfo=timezone.utc)
        user_data = await state.get_data()
        start_date = user_data.get('start_date')

        if end_date <= start_date:
            await message.answer("–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.", reply_markup=kb.cancel_kb); return

        user_id = message.from_user.id
        logging.info(f"–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime(DATE_FORMAT)} - {end_date_naive.strftime(DATE_FORMAT)} –æ—Ç {user_id}")
        income, expense, details = await db.get_period_summary_with_details(user_id, start_date, end_date)
        period_name = f"–ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime(DATE_FORMAT)} –ø–æ {end_date_naive.strftime(DATE_FORMAT)}"
        report_text = format_report_text(period_name, income, expense, details)
        await message.answer(report_text, reply_markup=kb.main_kb)
        await state.clear()

    except ValueError:
         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hbold
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ {hbold(DATE_FORMAT)} –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.", reply_markup=kb.main_kb)
        await state.clear()