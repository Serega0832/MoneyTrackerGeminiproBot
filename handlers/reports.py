# handlers/reports.py
import logging
from datetime import datetime, timezone, timedelta
from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
# --- –î–û–ë–ê–í–ò–¢–¨ –ò–ú–ü–û–†–¢ ---
from aiogram.utils.markdown import hbold, hitalic
import keyboards as kb
import db

reports_router = Router()

MONTH_NAMES_RU = {
    1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
}

def format_report_text(period_name: str, income: float, expense: float, details: dict[str, float]) -> str:
    # –ó–¥–µ—Å—å hbold –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ
    balance = income - expense
    report_text = f"üìä <b>–û—Ç—á–µ—Ç –∑–∞ {period_name}:</b>\n\n" \
                  f"üü¢ –î–æ—Ö–æ–¥—ã: {income:.2f}\n" \
                  f"üî¥ –†–∞—Å—Ö–æ–¥—ã: {expense:.2f}\n\n" \
                  f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f}\n"
    if details:
        report_text += "\nüìà <b>–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        sorted_details = sorted(details.items(), key=lambda item: item[1], reverse=True)
        for category, amount in sorted_details:
            report_text += f" - {category}: {amount:.2f}\n"
    elif expense > 0: report_text += "\nüìà –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    else: report_text += "\nüìà –†–∞—Å—Ö–æ–¥–æ–≤ –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ –Ω–µ –±—ã–ª–æ."
    return report_text

@reports_router.message(F.text == "üìà –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü", StateFilter(None))
@reports_router.message(Command("report"), StateFilter(None))
async def process_get_current_month_report(message: types.Message, state: FSMContext):
    await state.clear(); user_id = message.from_user.id; logging.info(f"–û—Ç—á–µ—Ç —Ç–µ–∫. –º–µ—Å—è—Ü –æ—Ç {user_id}")
    now = datetime.now(timezone.utc); start_of_month = datetime(now.year, now.month, 1, tzinfo=timezone.utc)
    if now.month == 12: end_of_month = datetime(now.year + 1, 1, 1, tzinfo=timezone.utc)
    else: end_of_month = datetime(now.year, now.month + 1, 1, tzinfo=timezone.utc)
    month_number = start_of_month.month; month_name_str = MONTH_NAMES_RU.get(month_number, f"{month_number:02d}"); year_str = start_of_month.year
    report_period_name = f"—Ç–µ–∫. –º–µ—Å—è—Ü ({month_name_str} {year_str})"
    income, expense, details = await db.get_period_summary_with_details(user_id, start_of_month, end_of_month)
    report_text = format_report_text(report_period_name, income, expense, details); await message.answer(report_text, reply_markup=kb.main_kb)

@reports_router.message(F.text == "üìÖ –û—Ç—á–µ—Ç –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", StateFilter(None))
@reports_router.message(Command("prevmonthreport"), StateFilter(None))
async def process_get_previous_month_report(message: types.Message, state: FSMContext):
    await state.clear(); user_id = message.from_user.id; logging.info(f"–û—Ç—á–µ—Ç –ø—Ä–µ–¥. –º–µ—Å—è—Ü –æ—Ç {user_id}")
    now = datetime.now(timezone.utc); end_of_previous_month = datetime(now.year, now.month, 1, tzinfo=timezone.utc)
    start_of_previous_month = datetime((end_of_previous_month - timedelta(days=1)).year, (end_of_previous_month - timedelta(days=1)).month, 1, tzinfo=timezone.utc)
    month_number = start_of_previous_month.month; month_name_str = MONTH_NAMES_RU.get(month_number, f"{month_number:02d}"); year_str = start_of_previous_month.year
    report_period_name = f"–ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü ({month_name_str} {year_str})"
    income, expense, details = await db.get_period_summary_with_details(user_id, start_of_previous_month, end_of_previous_month)
    report_text = format_report_text(report_period_name, income, expense, details); await message.answer(report_text, reply_markup=kb.main_kb)

@reports_router.message(F.text == "üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏", StateFilter(None))
@reports_router.message(Command("recent"), StateFilter(None))
async def process_get_recent(message: types.Message, state: FSMContext):
    await state.clear(); user_id = message.from_user.id; logging.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç {user_id}")
    transactions = await db.get_recent_transactions(user_id, limit=10)
    if not transactions: await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=kb.main_kb); return
    response_lines = ["üïí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:</b>\n"]
    for row in transactions:
        try: dt_obj = datetime.fromisoformat(row['created_at']) if isinstance(row['created_at'], str) else row['created_at']; dt_str = dt_obj.strftime("%d.%m.%Y %H:%M")
        except: dt_str = str(row['created_at'])
        symbol = "üü¢" if row['transaction_type'] == 'income' else "üî¥"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hitalic
        line = f"{dt_str} {symbol} {row['amount']:.2f} - {hitalic(row['category'])}"
        response_lines.append(line)
    await message.answer("\n".join(response_lines), reply_markup=kb.main_kb)